// Code generated by mockery v2.42.1. DO NOT EDIT.

package domain

import (
	context "context"
	entity "service-product/domain/entity"

	mock "github.com/stretchr/testify/mock"

	model "service-product/internal/model"

	request "service-product/internal/http/list_product/request"

	uuid "github.com/google/uuid"
)

// ProductMock is an autogenerated mock type for the ProductRepository type
type ProductMock struct {
	mock.Mock
}

// CheckIdProduct provides a mock function with given fields: ctx, id
func (_m *ProductMock) CheckIdProduct(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckIdProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductPlayer provides a mock function with given fields: ctx, req
func (_m *ProductMock) GetProductPlayer(ctx context.Context, req request.ListProductRequest) (*[]model.Product, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetProductPlayer")
	}

	var r0 *[]model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ListProductRequest) (*[]model.Product, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ListProductRequest) *[]model.Product); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ListProductRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: ctx, data
func (_m *ProductMock) InsertProduct(ctx context.Context, data *entity.Product) (*entity.Product, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertProduct")
	}

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) (*entity.Product, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) *entity.Product); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Product) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductMock creates a new instance of ProductMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductMock {
	mock := &ProductMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
